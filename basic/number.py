# 파이썬은 자료형 지정 미리하지 않음

name = 'Python'

age = 1991

print(name, '은', age, '년 생입니다')

# 최초 실행 : ctrl + shift + F10
# 재  실행 : shift + F10

print('----------------------------------')
# 숫자형
num1 = 5

num2 = 5.0

num3 = 5.0000

print(num1, num2, num3)

# 정수 : 정수만 표현할 수 있는 수
# 실수(부동 소수점) : 소수점 이하도 표현할 수 있는 수

print('----------------------------------')
# 숫자형은 사칙연산 가능
plus = 1 + 2
minus = 2 - 2
multiple1 = 3 * 3
multiple2 = 3 * 3.0
# 대게 수를 다룰 때 정수만 사용하면 결과도 정수로, 실수를 사용하면 결과도 실수로 나옴
divide1 = 30/5 # 실수로 리턴 유의
divide2 = 30//5
remainder = 10%5
square = 2 ** 10
print('plus:',plus ,'minus:',minus ,'multiple1:',multiple1 ,'multiple2:',multiple2)
print('divide1:',divide1 , 'divide2:',divide2,'remainder:',remainder)
print('square:',square)

print('-----------------------------------')
'''
수학에서는 실수는 정수를 포함하는 개념

파이썬에서는 실수는 정수와 부동소수점 개념을 포함하고 있음

파이썬에서 사용하는 실수 표현은 부동소수점이라고도 부른다.

정수계산은 정수영역만 다룰 수 있는 대신 항상 정확
부동소수점 계산은 실수 영역까지 다룰 수 있는 대신 완벽한 정확성은 보장되지 않음

'''
print(0.1 + 0.1 == 0.2)
print(0.1 + 0.1 + 0.1 == 0.3)

print('------------------------------------')

print(-7/4)
print(-7//4)

"""
음수 연산시에는 // 사용시에 주의
: //는 몫을 리턴받는 연산자. 이때 몫은 정수로 인식
    나눗셈의 결과값 보다 작은 정수 중 가장 큰 정수를 리턴해 줌
"""
print('-------------------------------------')

'''
 파이썬에서는 숫자를 사용할 때 경우를 나눠서 사용하자
 1. 정확해야 하므로 정수만 써도 괜찮은 경우
 2. 정확하지 않음을 감안하고 실수가 필요할 경우
'''
print('--------------------------------------')
a = 33
b = 3
# 사칙연산과 승을 구해보세요
print(a+b, a-b, a*b, a/b, a**b)

print('--------------------------------------')
name = 'Python'
age = '1991'

print(name, '은', age,"년 생입니다")

# year = 2019 - age

# print(name, '은', year, '되었습니다')

# 파이썬은 실행 전까지 자료형 오류를 인식하지 않으므로 자료형 맞춰주는 것을 신경써야 함

print('--------------------------------------')
# 숫자와 문자 (파이썬은 문자열만 있음)
text = '2019' + '1991'
number = 2019 + 1991
print(text), print(number)

print('--------------------------------------')
# 경우에 따라 정수와 실수를 바꿀 수 있도록 지원
print(int(5.0))
print(float(5))

# 8진수(octal) : 숫자0 + 알파벳 소문자 o 또는 대문자 O + 숫자
print(0o10)
# 16진수(hexadecimal) : 숫자0 + 알파벳 소문자 x + 숫자
print(0x89)



