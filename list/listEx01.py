print()
'''
list - list
set  - set
map  - directory

list 자료형 : 값을 여러개 저장하고 싶을 때 사용
            : 다른 변수를 담을 수 있는 변수
            
 - 값을 여러 개 저장하려면 변수를 여러 개 사용해야 하므로 불편.
   매번 새로운 변수이름 지정하는 것도 불편
   
 - 기본 형태 : 리스트명 = [요소1, 요소2, 요소3, ....]
 - 리스트 안에는 어떤 자료형도 가능하다
'''

a = []        # 비어있는 리스트
b = [1, 2, 3] # 요소값으로 숫자형 가능
c = ['wow', 'python'] # 요소값으로 문자형 가능
d = [1, 2, 'wow'] # 요소값으로 숫자, 문자 함께 사용 가능
e = [1, 2, ['wow', 'python']] # 요소값으로 리스트 자체를 함께 사용 가능

print(a,b,c,d,e)

print('--------------------------------')
# list indexing 적용 가능
print(b[0])

print(b[-1])

f = [1, 2, 3, 4, 5, 6, 7]

# 숫자 1, 2 를 출력해 보세요
print(f[0], f[1])
print(f[0:2]) # 슬라이싱 적용 가능

print('--------------------------------')
# 각 요소끼리 연산도 가능
print(f[0]+f[1])

# print(b[2] + 'hi')
print(str(b[2]) + 'hi') # str() : 숫자를 문자형으로 변환 - 내장함수
print(b[2], 'hi')
print(d[2] + 'hi')

print(b * 3) # 리스트 반복

print('--------------------------------')
# 리스트 요소값 하나 수정
a = [10, 20, 30]
print(a)

a[0] = 15
print(a)

# 연속된 범위의 값 수정
print(a[1 : 2])
a[1:2] = ['wow', 'fantastic', 'python']
print(a)
'''
연속된 범위값으로 수정하는 결과와 인덱싱을 통해 수정하는 결과는 전혀 다름에 유의!
'''
print('--------------------------------')
b = [10, 15, 30]

b[1] = ['wow', 'fantastic', 'python']
print(b)

print('--------------------------------')
# 리스트 요소값 삭제 1 - 비어있는 리스트를 이용
print(a[1:3])
a[1:3] = []
print(a)

print('--------------------------------')
# 리스트 요소값 삭제 2 - del
del a[1]
print(a)